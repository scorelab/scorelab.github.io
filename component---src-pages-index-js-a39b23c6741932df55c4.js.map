{"version":3,"sources":["webpack:///./src/queries/publications.js","webpack:///./src/pages/index.js","webpack:///./src/queries/home.js","webpack:///./src/queries/projects.js"],"names":["usePublicationsPageData","allMarkdownRemark","edges","length","node","frontmatter","HomePage","homeData","projectsData","useProjectsPageData","publicationsData","contactInfoData","useContactInfoData","headerSection","headerSecton","aboutSection","projectsSection","contactSection","publicationsSection","projects","map","edge","id","MainLayout","SEO","title","mainText","subText","buttonText","buttonLink","image","sideComponent","mediumUrl","small","limit","items","publications","suffle","gitterRoomsListHeading","gitterOrganizationName","gitterToken","mailingListHeading","feedUrl","mailingListFeedUrl"],"mappings":"8IAEaA,EAA0B,WAAO,IACpCC,EADmC,OACnCA,kBAsBR,OAAOA,EAAkBC,MAAMC,OAAS,EAAIF,EAAkBC,MAAM,GAAGE,KAAKC,YAAc,O,87NCiE7EC,UAtEE,WACf,IClBOL,EDkBDM,GClBCN,EAD4B,OAC5BA,mBAqCkBC,MAAMC,OAAS,EAAIF,EAAkBC,MAAM,GAAGE,KAAKC,YAAc,KDlBpFG,EAAeC,cACfC,EAAmBV,cACnBW,EAAkBC,cAElBC,EAAgBN,EAASO,aACzBC,EAAeR,EAASQ,aAExBC,GADiBT,EAASU,eACRV,EAASS,iBAC3BE,EAAsBX,EAASW,oBAC/BC,EAAWX,EAAaY,KAAI,SAAAC,GAAI,sBAAOC,GAAID,EAAKjB,KAAKkB,IAAOD,EAAKjB,KAAKC,gBAE5E,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,yBACX,kBAAC,IAAD,CACEC,SAAUb,EAAca,SACxBC,QAASd,EAAcc,QACvBC,WAAYf,EAAce,WAC1BC,WAAYhB,EAAcgB,WAC1BC,MAAOjB,EAAciB,QAEvB,kBAAC,IAAD,CACEL,MAAOV,EAAaU,MACpBC,SAAUX,EAAaW,SACvBK,cACE,kBAAC,IAAD,CACEN,MAAM,kBACNO,UAAWjB,EAAaiB,UACxBC,OAAO,EACPC,MAAO,MAIb,kBAAC,IAAD,CACET,MAAOT,EAAgBS,MACvBU,MAAOhB,EACPe,MAAO,KAET,6BACA,kBAAC,IAAD,CACET,MAAOP,EAAoBO,MAC3BU,MAAOzB,EAAiB0B,aACxBF,MAAO,EACPG,QAAM,IAER,6BACA,kBAAC,IAAD,CACEZ,MAAOd,EAAgB2B,uBACvBC,uBAAwB5B,EAAgB4B,uBACxCC,YAAa7B,EAAgB6B,cAE/B,kBAAC,IAAD,CACEf,MAAOd,EAAgB8B,mBACvBC,QAAS/B,EAAgBgC,qBAE3B,6BACA,6BACA,gC,m4ZE7EOlC,EAAsB,WAqBjC,OArBuC,OAC/BR,kBAoBiBC","file":"component---src-pages-index-js-a39b23c6741932df55c4.js","sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nexport const usePublicationsPageData = () => {\r\n  const { allMarkdownRemark } = useStaticQuery (\r\n    graphql`\r\n      query PublicationsPageData {\r\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"publications\"}}}) {\r\n          edges {\r\n            node {\r\n              id\r\n              frontmatter {\r\n                title\r\n                publications {\r\n                  title\r\n                  conference\r\n                  authors\r\n                  slug\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n  return allMarkdownRemark.edges.length > 0 ? allMarkdownRemark.edges[0].node.frontmatter : null\r\n}","import React from \"react\"\r\nimport {useHomePageData} from \"../queries/home\"\r\nimport {useProjectsPageData} from \"../queries/projects\"\r\nimport {usePublicationsPageData} from \"../queries/publications\"\r\nimport {useContactInfoData} from \"../queries/contactInfo\"\r\nimport MainLayout from \"../layouts/MainLayout\"\r\nimport {SEO} from '../components/SEO'\r\n\r\n// WEBIU Components\r\nimport {\r\n  Header, \r\n  DescriptionContainer, \r\n  MediumFeed, \r\n  ProjectsList, \r\n  PublicationsList, \r\n  Contact,\r\n  MailingListFeed,\r\n  GitterRoomsList, \r\n} from '../../Webiu'\r\n\r\nconst HomePage = () => {\r\n  const homeData = useHomePageData()\r\n  const projectsData = useProjectsPageData()\r\n  const publicationsData = usePublicationsPageData()\r\n  const contactInfoData = useContactInfoData()\r\n\r\n  const headerSection = homeData.headerSecton\r\n  const aboutSection = homeData.aboutSection\r\n  const contactSection = homeData.contactSection\r\n  const projectsSection = homeData.projectsSection\r\n  const publicationsSection = homeData.publicationsSection\r\n  const projects = projectsData.map(edge => ({ id: edge.node.id, ...edge.node.frontmatter}))\r\n\r\n  return (\r\n    <MainLayout>\r\n      <SEO title=\"Score Labs Home Page\" />\r\n      <Header \r\n        mainText={headerSection.mainText}\r\n        subText={headerSection.subText}\r\n        buttonText={headerSection.buttonText}\r\n        buttonLink={headerSection.buttonLink}\r\n        image={headerSection.image}\r\n      />\r\n      <DescriptionContainer\r\n        title={aboutSection.title}\r\n        mainText={aboutSection.mainText}\r\n        sideComponent={(\r\n          <MediumFeed \r\n            title=\"Recent Articles\"\r\n            mediumUrl={aboutSection.mediumUrl}\r\n            small={true}\r\n            limit={3}\r\n          />\r\n        )}\r\n      />\r\n      <ProjectsList \r\n        title={projectsSection.title}\r\n        items={projects}\r\n        limit={15}\r\n      />\r\n      <br />\r\n      <PublicationsList \r\n        title={publicationsSection.title}\r\n        items={publicationsData.publications}\r\n        limit={4}\r\n        suffle\r\n      />\r\n      <br />\r\n      <GitterRoomsList \r\n        title={contactInfoData.gitterRoomsListHeading}\r\n        gitterOrganizationName={contactInfoData.gitterOrganizationName}\r\n        gitterToken={contactInfoData.gitterToken}\r\n      />\r\n      <MailingListFeed \r\n        title={contactInfoData.mailingListHeading}\r\n        feedUrl={contactInfoData.mailingListFeedUrl}\r\n      />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      {/**\r\n        <Contact \r\n          contactMessage={contactSection.contactMessage}\r\n          subscribeMessage={contactSection.subscribeMessage}\r\n        />\r\n       */}\r\n    </MainLayout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n","import { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nexport const useHomePageData = () => {\r\n  const {allMarkdownRemark} = useStaticQuery (\r\n    graphql`\r\n      query HomePageData {\r\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"home\"}}}) {\r\n          edges {\r\n            node {\r\n              id\r\n              frontmatter {\r\n                headerSecton {\r\n                  mainText\r\n                  subText\r\n                  buttonText\r\n                  buttonLink\r\n                  image\r\n                }\r\n                aboutSection {\r\n                  title\r\n                  mainText\r\n                  mediumUrl\r\n                }\r\n                projectsSection {\r\n                  title\r\n                }\r\n                publicationsSection {\r\n                  title\r\n                }\r\n                contactSection {\r\n                  contactMessage\r\n                  subscribeMessage\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n  return allMarkdownRemark.edges.length > 0 ? allMarkdownRemark.edges[0].node.frontmatter : null\r\n}","import { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nexport const useProjectsPageData = () => {\r\n  const { allMarkdownRemark } = useStaticQuery (\r\n    graphql`\r\n      query ProjectsPageData {\r\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"project\"}}}) {\r\n          edges {\r\n            node {\r\n              id\r\n              frontmatter {\r\n                title\r\n                template\r\n                description\r\n                image\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n  return allMarkdownRemark.edges\r\n}"],"sourceRoot":""}