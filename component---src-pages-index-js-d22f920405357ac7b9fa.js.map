{"version":3,"sources":["webpack:///./src/queries/publications.js","webpack:///./src/pages/index.js","webpack:///./src/queries/home.js","webpack:///./src/queries/projects.js"],"names":["usePublicationsPageData","allMarkdownRemark","edges","length","node","frontmatter","HomePage","homeData","projectsData","useProjectsPageData","publicationsData","contactInfoData","useContactInfoData","headerSection","headerSecton","aboutSection","projectsSection","contactSection","publicationsSection","projects","map","edge","id","MainLayout","SEO","title","mainText","subText","buttonText","buttonLink","image","sideComponent","mediumUrl","small","limit","items","publications","suffle","gitterRoomsListHeading","gitterOrganizationName","gitterToken","mailingListHeading","feedUrl","mailingListFeedUrl"],"mappings":"6IAEaA,EAA0B,WAAO,IACpCC,EADmC,OACnCA,kBAsBR,OAAOA,EAAkBC,MAAMC,OAAS,EAAIF,EAAkBC,MAAM,GAAGE,KAAKC,YAAc,O,87NCiE7EC,UAtEE,WACf,IClBOL,EDkBDM,GClBCN,EAD4B,OAC5BA,mBAqCkBC,MAAMC,OAAS,EAAIF,EAAkBC,MAAM,GAAGE,KAAKC,YAAc,KDlBpFG,EAAeC,cACfC,EAAmBV,cACnBW,EAAkBC,cAElBC,EAAgBN,EAASO,aACzBC,EAAeR,EAASQ,aAExBC,GADiBT,EAASU,eACRV,EAASS,iBAC3BE,EAAsBX,EAASW,oBAC/BC,EAAWX,EAAaY,KAAI,SAAAC,GAAI,sBAAOC,GAAID,EAAKjB,KAAKkB,IAAOD,EAAKjB,KAAKC,gBAE5E,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,yBACX,kBAAC,IAAD,CACEC,SAAUb,EAAca,SACxBC,QAASd,EAAcc,QACvBC,WAAYf,EAAce,WAC1BC,WAAYhB,EAAcgB,WAC1BC,MAAOjB,EAAciB,QAEvB,kBAAC,IAAD,CACEL,MAAOV,EAAaU,MACpBC,SAAUX,EAAaW,SACvBK,cACE,kBAAC,IAAD,CACEN,MAAM,kBACNO,UAAWjB,EAAaiB,UACxBC,OAAO,EACPC,MAAO,MAIb,kBAAC,IAAD,CACET,MAAOT,EAAgBS,MACvBU,MAAOhB,EACPe,MAAO,KAET,6BACA,kBAAC,IAAD,CACET,MAAOP,EAAoBO,MAC3BU,MAAOzB,EAAiB0B,aACxBF,MAAO,EACPG,QAAM,IAER,6BACA,kBAAC,IAAD,CACEZ,MAAOd,EAAgB2B,uBACvBC,uBAAwB5B,EAAgB4B,uBACxCC,YAAa7B,EAAgB6B,cAE/B,kBAAC,IAAD,CACEf,MAAOd,EAAgB8B,mBACvBC,QAAS/B,EAAgBgC,qBAE3B,6BACA,6BACA,gC,m4ZE7EOlC,EAAsB,WAqBjC,OArBuC,OAC/BR,kBAoBiBC","file":"component---src-pages-index-js-d22f920405357ac7b9fa.js","sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const usePublicationsPageData = () => {\n  const { allMarkdownRemark } = useStaticQuery (\n    graphql`\n      query PublicationsPageData {\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"publications\"}}}) {\n          edges {\n            node {\n              id\n              frontmatter {\n                title\n                publications {\n                  title\n                  conference\n                  authors\n                  slug\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return allMarkdownRemark.edges.length > 0 ? allMarkdownRemark.edges[0].node.frontmatter : null\n}","import React from \"react\"\nimport {useHomePageData} from \"../queries/home\"\nimport {useProjectsPageData} from \"../queries/projects\"\nimport {usePublicationsPageData} from \"../queries/publications\"\nimport {useContactInfoData} from \"../queries/contactInfo\"\nimport MainLayout from \"../layouts/MainLayout\"\nimport {SEO} from '../components/SEO'\n\n// WEBIU Components\nimport {\n  Header, \n  DescriptionContainer, \n  MediumFeed, \n  ProjectsList, \n  PublicationsList, \n  Contact,\n  MailingListFeed,\n  GitterRoomsList, \n} from '../../Webiu'\n\nconst HomePage = () => {\n  const homeData = useHomePageData()\n  const projectsData = useProjectsPageData()\n  const publicationsData = usePublicationsPageData()\n  const contactInfoData = useContactInfoData()\n\n  const headerSection = homeData.headerSecton\n  const aboutSection = homeData.aboutSection\n  const contactSection = homeData.contactSection\n  const projectsSection = homeData.projectsSection\n  const publicationsSection = homeData.publicationsSection\n  const projects = projectsData.map(edge => ({ id: edge.node.id, ...edge.node.frontmatter}))\n\n  return (\n    <MainLayout>\n      <SEO title=\"Score Labs Home Page\" />\n      <Header \n        mainText={headerSection.mainText}\n        subText={headerSection.subText}\n        buttonText={headerSection.buttonText}\n        buttonLink={headerSection.buttonLink}\n        image={headerSection.image}\n      />\n      <DescriptionContainer\n        title={aboutSection.title}\n        mainText={aboutSection.mainText}\n        sideComponent={(\n          <MediumFeed \n            title=\"Recent Articles\"\n            mediumUrl={aboutSection.mediumUrl}\n            small={true}\n            limit={3}\n          />\n        )}\n      />\n      <ProjectsList \n        title={projectsSection.title}\n        items={projects}\n        limit={15}\n      />\n      <br />\n      <PublicationsList \n        title={publicationsSection.title}\n        items={publicationsData.publications}\n        limit={4}\n        suffle\n      />\n      <br />\n      <GitterRoomsList \n        title={contactInfoData.gitterRoomsListHeading}\n        gitterOrganizationName={contactInfoData.gitterOrganizationName}\n        gitterToken={contactInfoData.gitterToken}\n      />\n      <MailingListFeed \n        title={contactInfoData.mailingListHeading}\n        feedUrl={contactInfoData.mailingListFeedUrl}\n      />\n      <br />\n      <br />\n      <br />\n      {/**\n        <Contact \n          contactMessage={contactSection.contactMessage}\n          subscribeMessage={contactSection.subscribeMessage}\n        />\n       */}\n    </MainLayout>\n  )\n}\n\nexport default HomePage\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useHomePageData = () => {\n  const {allMarkdownRemark} = useStaticQuery (\n    graphql`\n      query HomePageData {\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"home\"}}}) {\n          edges {\n            node {\n              id\n              frontmatter {\n                headerSecton {\n                  mainText\n                  subText\n                  buttonText\n                  buttonLink\n                  image\n                }\n                aboutSection {\n                  title\n                  mainText\n                  mediumUrl\n                }\n                projectsSection {\n                  title\n                }\n                publicationsSection {\n                  title\n                }\n                contactSection {\n                  contactMessage\n                  subscribeMessage\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return allMarkdownRemark.edges.length > 0 ? allMarkdownRemark.edges[0].node.frontmatter : null\n}","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useProjectsPageData = () => {\n  const { allMarkdownRemark } = useStaticQuery (\n    graphql`\n      query ProjectsPageData {\n        allMarkdownRemark(filter: {frontmatter: {template: {eq: \"project\"}}}) {\n          edges {\n            node {\n              id\n              frontmatter {\n                title\n                template\n                description\n                image\n                slug\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return allMarkdownRemark.edges\n}"],"sourceRoot":""}